set nocompatible
syntax on
set encoding=utf-8

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

" Lots borrowed from https://github.com/mgill25/dotfiles/blob/master/vim/vimrc
set nu
set gdefault
set cursorline

" Hide the toobar and menubar
set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=L
set wildignore=*.dll,*.o,*.pyc,*.bak,*.exe,*.jpg,*.jpeg,*.png,*.gif,*$py.class,*.class,*.zip,*.sw[op],*/node_modules,*/.git
set ignorecase 	" Ignore case when searching
set smartcase   " Ignore case when search pattern all lowercase. Case-sensitive otherwise.
" let &colorcolumn=join(range(81,999),",")
set colorcolumn=80

"Indentation Settings. Taken from the Hitchhiker's guide to Python.
set scrolloff=5
set title
set ttyfast
set expandtab
set shiftround
set clipboard=unnamed  " will copy to system clipboard

" autocmd FileType python set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType javascript set tabstop=2 softtabstop=2 shiftwidth=2
autocmd FileType javascript setlocal commentstring=//\ %s
autocmd FileType javascript noremap <buffer> <leader>b :call JsBeautify()<cr>
autocmd FileType javascript let b:javascript_fold = 0
autocmd BufNewFile,BufRead *.json setlocal ft=javascript
let javascript_enable_domhtmlcss=1
autocmd FileType html,htmldjango set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType json setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType yaml setlocal expandtab shiftwidth=2 tabstop=8 softtabstop=2
autocmd BufNewFile,BufRead *.sls setlocal ft=yaml

" template language support (SGML / XML too)
" ------------------------------------------
" and disable that stupid html rendering (like making stuff bold etc)
autocmd FileType xml,html,htmljinja,htmldjango setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType html setlocal commentstring=<!--\ %s\ -->
" autocmd FileType htmljinja setlocal commentstring={#\ %s\ #}
autocmd BufWritePre *.py :%s/\s\+$//e   " Removing Trailing Whitespace on buffer write
" assumes that files in templates are jinja (though they might be angular)
" autocmd BufRead,BufNewFile **/templates/*.html set filetype=htmljinja
let html_no_rendering=1
" let g:syntastic_html_checkers = []

" When loading text files, wrap them and don't split up words.
au BufNewFile,BufRead *.txt setlocal wrap
au BufNewFile,BufRead *.txt setlocal lbr

set showcmd
set laststatus=2                " Always show the status line
set encoding=utf8
set backupdir=~/.tmp
set directory=~/.tmp " Don't clutter my dirs up with swp and tmp files

" suppress python3.7 warning
" ref: https://github.com/vim/vim/issues/3117#issuecomment-402622616
if has('python3')
  silent! python3 1
endif

" vim-plug is the new Vundle!
call plug#begin('~/.vim/bundle')

" editor goodies
" file search
Plug 'ctrlpvim/ctrlp.vim'
" cursor toggle
Plug 'jszakmeister/vim-togglecursor'

" colors and themes
Plug 'morhetz/gruvbox'
Plug 'mhartington/oceanic-next'
Plug 'chriskempson/tomorrow-theme', { 'rtp': 'vim' }
Plug 'jnurmine/Zenburn'

" Autocomplete
if !&diff
  if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
  endif
  let g:python3_host_prog = '/usr/local/bin/python3'
  " deoplete settings https://gist.github.com/afnanenayet/8c2ee0fdabb8d1e292b788f9723673c5
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_smart_case = 1
endif
" Python autocomplete
Plug 'zchee/deoplete-jedi'

" git
Plug 'tpope/vim-fugitive'

" syntax highlighting
Plug 'jelera/vim-javascript-syntax'
Plug 'vim-python/python-syntax'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'Raimondi/delimitMate'
" scss
" Plug 'cakebaker/scss-syntax.vim'
" python indentation
Plug 'hynek/vim-python-pep8-indent'
" swift
" Plug 'keith/swift.vim'
" html
" Plug 'mitsuhiko/vim-jinja'
" apiblueprint
" Plug 'kylef/apiblueprint.vim'
" applescript
" Plug 'vim-scripts/applescript.vim'
" StatusBar plugin - Lightline
Plug 'itchyny/lightline.vim'

" code/generic
" ALE replaces syntastic for syntax checking
Plug 'w0rp/ale'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
" ack.vim - great search
Plug 'mileszs/ack.vim'
" editorconfig
Plug 'editorconfig/editorconfig-vim'

" Automatically updates tags on save
" Plug 'craigemery/vim-autotag'
" let g:autotagTagsFile='./.git/tags'

" Code folding for python
Plug 'tmhedberg/SimpylFold'
" Faster folding in insert mode
Plug 'Konfekt/FastFold'

" Snippets
" Plug 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
" Plug 'honza/vim-snippets'

" NERDTree
" Plug 'scrooloose/nerdtree'
" window management
"Plug 'adsahay/GoldenView.Vim'
" Goldenview setup
"let g:goldenview__enable_default_mapping=0
"call plug#end()

"" 1. split to tiled windows
"nmap <silent> <C-L>  <Plug>GoldenViewSplit

"" 2. quickly switch current window with the main pane
"" and toggle back
"nmap <silent> <F8>   <Plug>GoldenViewSwitchMain
"nmap <silent> <S-F8> <Plug>GoldenViewSwitchToggle

"" 3. jump to next and previous window
"nmap <silent> <tab>  <Plug>GoldenViewNext
"nmap <silent> <S-tab>  <Plug>GoldenViewPrevious

" python syntax highlighting
let g:python_highlight_all = 1

" set colorscheme
" for vim 8
if (has("termguicolors"))
  set termguicolors
endif

set background=dark
colorscheme OceanicNext
set guifont=Monaco\ for\ Powerline:h13

" lightline
" set noshowmode
let g:lightline = {
      \ 'colorscheme': 'oceanicnext',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }


" ctrlp setup
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
nnoremap <silent> <C-R> :CtrlPTag<cr>

" ctags
set tags+=./.git/tags
set notagrelative       " tags are not relative to .git/tags
" some copy/paste fixes
" ref: http://unix.stackexchange.com/a/199207
set pastetoggle=<F2>

" SimpylFold settings
" do not fold docstrings, imports
let g:SimpylFold_fold_docstring=0
let g:SimpylFold_fold_import=0
set foldlevelstart=99   " disable folds when starting editing
